


# ----------------------------------
# CMake API
# ----------------------------------

# 定义一个函数来判断文件是否是头文件
function(is_header_file filename is_header_var)
    # 获取文件扩展名
    get_filename_component(extension ${filename} EXT)
    # 判断是否为头文件，这里以.h和.hpp为头文件的扩展名
    if (extension STREQUAL ".h" OR extension STREQUAL ".hpp")
        set(${is_header_var} TRUE PARENT_SCOPE)
    else ()
        set(${is_header_var} FALSE PARENT_SCOPE)
    endif ()
endfunction()

# 定义一个宏，用于递归查找文件，并允许自定义排除模式
macro(collect var)
    #message("collect argument count: ${ARGC}, all arguments: ${ARGV}")
    #message("all arguments: ${ARGV}")
    #message("optional arguments: ${ARGN}")
    set(FILES "")
    if (${ARGC} LESS 1)
        message(FATAL_ERROR "collect macro requires at least two argument")
    elseif (${ARGC} EQUAL 1)
        foreach (_dir IN ITEMS ${CMAKE_CURRENT_SOURCE_DIR})
            #file(GLOB_RECURSE _files RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}${_dir} ${pattern})
            file(GLOB_RECURSE _files ${_dir})
            foreach (_file IN LISTS _files)
                list(APPEND FILES ${_file})
            endforeach ()
        endforeach ()
    elseif (${ARGC} GREATER 1)
        #message(STATUS "CMAKE_CURRENT_SOURCE_DIR=${CMAKE_CURRENT_SOURCE_DIR}")
        #message(STATUS "ARGN=${ARGN}")
        foreach (_dir IN ITEMS ${ARGN})
            #message(STATUS "_dir=${_dir}")
            #file(GLOB_RECURSE _files RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}${_dir} ${pattern})
            set(_absolute_dir ${CMAKE_CURRENT_SOURCE_DIR}/${_dir})
            get_filename_component(FOLDER_PATH ${_absolute_dir} DIRECTORY)
            #message(STATUS "FOLDER_PATH=${FOLDER_PATH}")
            #include_directories(${FOLDER_PATH})
            file(GLOB_RECURSE _files ${_absolute_dir})
            foreach (_file IN LISTS _files)
                list(APPEND FILES ${_file})
            endforeach ()
        endforeach ()
    endif ()
    set(${var} ${FILES})
    message(STATUS "collect ${var} as ${FILES}")
endmacro()


# 定义一个宏，用于递归查找文件，并允许自定义排除模式
macro(collect_relative var)
    #message("collect argument count: ${ARGC}, all arguments: ${ARGV}")
    #message("all arguments: ${ARGV}")
    #message("optional arguments: ${ARGN}")
    set(FILES "")
    if (${ARGC} LESS 1)
        message(FATAL_ERROR "collect macro requires at least two argument")
    elseif (${ARGC} EQUAL 1)
        foreach (_dir IN ITEMS ${CMAKE_CURRENT_SOURCE_DIR})
            #file(GLOB_RECURSE _files RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}${_dir} ${pattern})
            file(GLOB_RECURSE _files ${_dir})
            foreach (_file IN LISTS _files)
                list(APPEND FILES ${_file})
            endforeach ()
        endforeach ()
    elseif (${ARGC} GREATER 1)
        #message(STATUS "CMAKE_CURRENT_SOURCE_DIR=${CMAKE_CURRENT_SOURCE_DIR}")
        #message(STATUS "ARGN=${ARGN}")
        foreach (_dir IN ITEMS ${ARGN})
            #message(STATUS "_dir=${_dir}")
            #file(GLOB_RECURSE _files RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}${_dir} ${pattern})
            set(_absolute_dir ${CMAKE_CURRENT_SOURCE_DIR}/${_dir})
            get_filename_component(FOLDER_PATH ${_absolute_dir} DIRECTORY)
            #message(STATUS "FOLDER_PATH=${FOLDER_PATH}")
            #include_directories(${FOLDER_PATH})
            file(GLOB_RECURSE _files ${_absolute_dir})
            foreach (_file IN LISTS _files)
                string(REPLACE "${CMAKE_CURRENT_SOURCE_DIR}/" "" filename ${_file})
                list(APPEND FILES ${filename})
            endforeach ()
        endforeach ()
    endif ()
    set(${var} ${FILES})
    message(STATUS "collect_relative ${var} as ${FILES}")
endmacro()



